===============================================================================================================
===============================================================================================================
Section 1 - Get started right

===============================================================================================================
Chapter 1 - An introduction to web programming with Java

    In this book you will learn all the skills you need to create a shopping cart application like this one.

    To access a web application you use a web browser that runs on a client computer.

    How static web pages work
        When the web service receives an HTTP request from a browser, the server gets the requested HTML file from the
        disk and sends the file back to the browser in the form of an HTTP response.The HTTP response includes the HTML
        document that the user requested and any other resource specified by the HTML code such as graphic files.

        Browser -> Web Server -> Html File
                <- Web Server    <-

    How a web server processes dynamic web pages
         Browser -> Web Server -> Web Application -> Database server
                 <- Web Server    <-                        <-

!!  3 approaches for java web applications (most common used at the time the book was written 2014)
        1. Servlet/JSP
        In a well-structured servlet/JSP application, servlets store the Java code that
        does the server-side processing, and JavaServer Pages (JSPs) store the HTML
        that defines the user interface. This HTML typically contains links to CSS and
        JavaScript files. To run a web application that uses servlets and JSPs, you only
        need to work with the servlet/JSP part of the Java EE specification.
!!!
        Since the servlet/JSP API is a relatively low-level API, it doesn’t do as much
        work for the developer as the other two APIs. However, the servlet/JSP API gives
        the developer a high degree of control over the HTML, CSS, and JavaScript
        that’s returned to the browser. In addition, the servlet/JSP API is the foundation
        for the other two approaches. As a result, it’s a good place to get started with
        Java web programming. As you progress through this book, you'll learn how to
        develop servlet/JSP applications.

        2. JSF
        JavaServer Faces (JSF) is a newer technology that’s designed to replace
        both servlets and JSPs. It provides a higher-level API that does more work for
        the programmer. When you use JSF, you typically use more Java EE features
        than you do with the servlet/JSP approach.
        When you use JSF, you can also use Enterprise JavaBeans (EJBs) to define
        server-side components. Although there are some benefits to using EJBs, they're
        overkill for most websites. As a result, this book doesn’t show how to use them.

!!      3. Spring Framework
        Like JSF, the Spring Framework is a higher-level API that does more work
        for the programmer than the servlet/JSP API. However, due to the way it’s struc-
        tured, the Spring Framework still gives the developer a high degree of control
        over the HTML/CSS/JavaScript that’s returned to the browser. As a result, if
        control over HTML/CSS/JavaScript is a priority for your website, the Spring
        Framework might be the right approach for you.

    In addition to working with servlets and JSPs the server must also run a servlet/JSP engine which is also known as
    a servlet/JSP container (ex Tomcat...OpenLiberty is a full Java EE application server..thus it has more implementations
    of the JAVA EE specification).

    The architecture
        1.The presentation layer for a typical servlet/JSP web application consists of HTML
        pages and JSPs.

        2.The business rules layer for a typical servlet/JSP web application consists of
        servlets. These servlets may call other Java classes including a special type of Java
        class known as a JavaBean. As you progress though this book, you'll learn how to
        use several special types of tags within a JSP to work with JavaBeans.

        3.The data access layer for a typical Java web application consists of classes that
        read and write data that’s stored on the server’s disk drive.
        For most web applications, the data is stored in a relational database such as
        MySQL. However, it may also be stored in binary files, text files, or XML files.

    The standard directories and files
        The WEB-INF directory that’s subordinate to the document root directory
        typically contains a web.xml file for the application. You'll learn more about
        this file in the next chapter. In addition, you can use this directory or any of its
        subdirectories to store files that you don’t want to be directly accessible from the
!!!     web. For example, some applications in this book use the WEB-INF directory to
        store data files. This prevents users from directly accessing these files.


===============================================================================================================
Chapter 2 - How to structure a web app with the MVC pattern

    The model 2 MVC pattern
        Figure 2-2 shows the Model 2 pattern. This pattern separates the code for the
        application into three layers: the model, the view, and the controller. As a result,
        this pattern is also known as the Model-View-Controller pattern (MVC pattern).
        This pattern works better than the Model | pattern whenever the processing
        requirements are substantial.

        In the MVC pattern, the model defines the business layer of the application.
        This layer is usually implemented by JavaBeans, which you'll learn more about
        in a moment. This type of class defines the data for the business objects and
        provides the methods that do the business processing.

        The view defines the presentation layer of the application. Since it’s cumber-
        some to use a servlet to send HTML to a browser, an MVC application uses
        HTML documents or JSPs to present the view to the browser.

        The controller manages the flow of the application, and this work is done
        by one or more servlets. To start, a servlet usually reads any parameters that are
        available from the request. Then, if necessary, the servlet updates the model and
        saves it to the data store. Finally, the servlet forwards the updated model to one
        of several possible JSPs for presentation.

        Here again, most applications need to map the data in the model to a data
        store. But the JavaBeans usually don’t provide the methods for storing their own
        data. Instead, data access classes like the UserDB class provide those methods.
        That separates the business logic from the data access operations.

        When you use the MVC pattern, you should try to keep the model, view,
        and controller as independent of each other as possible. That makes it easier to
        modify an application later on. If, for example, you decide to modify an applica-
        tion so it presents the view in a different way, you should be able to modify the
        view layer without making any changes to the controller or model layers. In
        practice, it’s difficult to separate these layers completely, but complete indepen-
        dence is the goal.

    The servlet for the back-end processing
        Each servlet is a Java class that extends the HttpServlet class. In this figure,
        for example, the servlet is a Java class named EmailListServlet that extends the
        HttpServlet class. This servlet begins by overriding the doPost method of the
        HttpServlet class. This method is executed when its URL receives an HTTP
        request that uses the POST method.


        After the if/else statement finishes, the servlet can return HTML to the
        browser by forwarding the request and response objects to the specified URL.
        This URL is typically a JSP, but can also be an HTML page. In this figure, for
        example, the code can forward these objects to the HTML file for the first page
        of the application or the JSP for the second page of the application. Since this
        code controls the flow of the web application, this servlet is known as a
        controller in the MVC pattern.

    Java bean requirements  (this is my title)
        Figure 2-7 shows the code for the User class. This class 1s a JavaBean, or
        bean, because it follows the three rules that all JavaBeans must follow.

        First, a JavaBean must contain a zero-argument constructor, which is a
        constructor that doesn’t accept any arguments. In this figure, the zero-argument
        constructor uses three statements to set all three instance variables equal to
        empty strings. As a result, a newly created User object stores empty strings for
        its instance variables instead of null values, which is usually what you want.

        Second, a JavaBean must contain get and set methods for all of the proper-
        ties that need to be accessed by JSPs. In this figure, for example, the methods
        provide access to all of the instance variables of the User class, so this class
        qualifies as a bean. Of course, you can also code get and set methods that
        provide access to other properties in a bean.

        To provide access to a Boolean value, you code is and set methods instead of
        get and set methods. For example, you could code methods named
        isEmailUpdated and setEmailUpdated to provide access to a Boolean property
        named emailUpdated.

        When you code the get, set, and is methods, you must follow the capitaliza-
        tion conventions used in this figure. In other words, each method name must start
        with a lowercase letter, followed by a property name that starts with an upper-
        case letter as in firstName.

        Third, a JavaBean must implement the Serializable or Externalizable inter-
        face. The Serializable interface is a tagging interface in the java.io package that
        indicates that a class contains get, set, and is methods that another class can use
        to read and write an object’s instance variables to and from a persistent data
        source. In this figure, for example, the User class implements the Serializable
        interface and contains all the necessary get and set methods. As a result, some
        servlet engines can save and restore this object if that’s necessary. For example,
        the Tomcat container can save the User object’s state before it shuts down, and it
        can restore the User object’s state when it starts up the next time.

        When coding a web application, it’s common to use JavaBeans to define the
        business objects of an application. These beans can be called invisible JavaBeans
        because they don’t define visible components. The focus of this book is on this
        tvpe of JavaBean.

    The JSP for the second page
        The main benefit that you get from coding your business classes so they
        qualify as JavaBeans is that you can then use special JSP tags for working with
        the beans. This is illustrated by the JSP in figure 2-8.

        Most of this code is HTML code. In fact, the only other code in this page is
        the three special JSP tags that are shaded. This makes JSPs easy to write if you know HTML.

!!!     The three JSP tags shown in this figure are Expression Language (EL) tags,
        and they're easy to identify because they begin with a dollar sign ($) followed
        by an opening brace ({), and they end with a closing brace (}). These tags work
        because the servlet in figure 2-6 stored the User object as an attribute of the
        request object with a name of user. In addition, this works because the User
        object has getEmail, getFirstName, and getLastName methods that provide
        access to the data that’s stored in the User object.

!!!     Although it’s possible to embed Java code in a JSP, that’s generally consid-
        ered a bad practice. Instead, it’s considered a good practice to restructure the
        app to move the Java code into a servlet that forwards the request and response
        objects to the JSP. That way, the servlet does the processing, and the JSP
        provides the HTML for the user interface. With this approach, the JSP doesn’t
        require any embedded Java code, only special JSP tags like the ones shown in
        this figure. And that means that the web designer can develop the JSPs with
        minimal interaction with the Java programmer, and the Java programmer can
        develop the servlets without worrying about the HTML.


===============================================================================================================
===============================================================================================================
Section 2 - Essential Servlet and JSP Skills

===============================================================================================================
Chapter 4 - A crash course in HTML5 and CSS3

    <!DOCTYPE html> - use this at the top of html5 files to specify html version

    Some of the elements are block elements and some are inline elements. The difference is that by default block
    elements are displayed on their own lines. In constrast inline elements flow to the right of preceeding elements
    and don't start new lines. As a result you need to use a br element after an inline element if you want to
    start a new line after it.

    The primary HTML5S semantic elements

        Element     Contents
        header      The header for a page.
        section     A generic section of a document that doesn’t indicate the type of content.
        article     A composition like an article in the paper.
        nav         A section of a page that contains links to other pages or placeholders.
        aside       A section of a page like a sidebar that is related to the content that’s near it.
        figure      An image, table, or other component that’s treated as a figure.
        footer      The footer for a page.

!!!
    2 benefits of using these HTML5 elements are simplified HTML and CSS and 2 improved SEO

!!! How to use the div and span elements with HTML5
        If you have experience with HTML, you are probably familiar with the div
        element. Traditionally, it was used to divide an HTML document into divisions
        that are identified by id attributes, as shown in the first example of figure 4-4.
        Then, CSS can use the ids to apply formatting to the divisions.

        But now that HTMLS is available, div elements shouldn’t be used to struc-
        ture a document. Instead, they should only be used when the HTMLS semantic
        elements aren’t appropriate and no structure is implied. If, for example, you want
        to group a series of elements so you can apply CSS to them, you can put them
        within a div element. But that doesn’t affect the structure of the content that’s
        implied by the HTMLS elements.

        Note too that div elements are often used in JavaScript applications. If, for
        example, a section element contains three h2 elements with each followed by a
        div element, JavaScript can be used to display or hide a div element whenever
        the heading that precedes it is clicked. Here again, this doesn’t affect the struc-
        ture of the content that’s implied by the HTMLS elements.

        Similarly, span elements have historically been used to identify portions of
        text that can be formatted by CSS. By today’s standards, though, it’s better to
        use elements that indicate the contents of the elements, like the cite, code, and q
        elements.

        But here again, span elements are often used in JavaScript applications. This
        is illustrated by the second example in this figure. Here, span elements are used
        to display the error messages for invalid entries.


    https://html5test.com/      to see how compatible your browser is with HTML5

    The two workarounds for using the HTML5 semantic elements
        (these are needed in case you use html5 elements and you want your website to work well on older browsers)

        The JavaScript shiv that lets older browsers know about the elements
            <script src="http://html5shiv.googlecode.com/svn/trunk/htm15.js"></script>

        The CSS rule set that sets the eight semantic elements to block elements
            article, aside, figure, figcaption, footer, header, nav, section {
                display: block;
            }

    Examples of links

        Relative to the current directory
            <a href="join.html">The Email List application 1</a><br>
            <a href="email/join.html">The Email List application 2</a><br>
            <a href="../">Go back one directory level</a><br>
            <a href="../../">Go back two directory levels</a><br>

        Relative to the webapps directory
            <a href="/">Go to the default root directory for the web server</a><br>
            <a href="/musicStore">Go to the root directory of the musicStore app</a>

        Absolute URLs
            <a href="http://www.murach.com/email">An Internet address</a>
            <a href="http://64.71.179.86/email">An IP address</a>

    How to code the basic CSS selector
        One of the key points here is that a class attribute can have the same value
        for more than one element on a page. Then, if you code a selector for that class,
        it’s used to format all the elements in that class. In contrast, since the id for
!!      an element must be unique, an id selector can only be used to format a single element.

!!!     Another key point is that a more specific style overrides a less specific style.
        For instance, an id selector is more specific than a class selector, and a class
        selector is more specific than a type selector. That means that a style for an id
        selector overrides the same style for a class selector, which overrides the same
        style for a type selector. Beyond that, the rules in a rule set flow from top to
        bottom. So, if you've set multiple rules for a property of an element, the last one
        overrides the previous ones.

        As you may know, there are many other types of selectors that you can use
        with CSS. But the ones in this figure should get you started with CSS. They are
        also the only ones that are used by the applications in this book.

















        To code a listener, you must implement one of the listener interfaces in the javax.servlet and javax.servlet.http
        packages.


===============================================================================================================
Chapter 20 - How to work with filters

    Starting with the servlet 2.3 specification, you can add a filter to your web
    application. For example, you can code a filter class that examines an HTTP
    request and does some processing based on the values of the HTTP request
    headers. Sometimes, this processing may include modifying the HTTP
    response that’s returned to the client. Since filters often work closely with
    HTTP requests and responses, you may want to read chapter 18 before you
    read this chapter.

!! A filter can intercept an HTTP request and execute code before or alter the
   requested servlet or JSP is executed. As a result, filters are ideal for handling
   cross-cutting concerns, which are aspects of an application that cut across differ-
   ent parts of an application

   How filters work

       The diagram in figure 20-1 shows how filters work. Here, the application
       uses two filters (Filter1 and Filter2) and two servlets (Servlet1 and Servlet2). In
       this diagram, Filter1 has been mapped to Servlet1, while Filter1 and Filter2 have
       been mapped to Servlet2.

       When a client requests Servlet1, Filter1 can execute some code before the
       code for Servlet1 is executed. Then, after the code for Servlet1 is executed,
       Filter1 can execute more code before the response is returned to the client.

       When a client requests Servlet2, both Filter1 and Filter2 can execute some
       code before the code for Servlet2 is executed. Then, after the code for Servlet2
       is executed, Filter2 and Filter1 can execute more code before the response is
       returned to the client.

   Two benefits of filters

       One benefit of filters is that they allow you to create modular code that can
       be applied to different parts of an application. In other words, the requested
       servlet doesn’t need to have any knowledge of the filter. As a result, you should
       be able to turn a filter on or off without affecting the behavior of the servlet.

       Another benefit of filters is that they allow you to create flexible code. This
       works because you use an application’s web.xml file to control when filters are
       executed. As a result, you can easily apply filters to different parts of an applica-
       tion, and you can easily turn a filter on or off.

!!! When to use filters

       As mentioned earlier, filters are ideal for handling cross-cutting concerns.
       For example, a filter can be used to write data to a log file, handle authentication,
       or compress a response. In addition, a filter can be used to handle image type
       conversions, localization, XSL transformations, caching, and so on.

!!!!!  Of course, if your servlet container already provides the type of functionality
       that you need, it’s usually easier and less error-prone to use the built-in function-
       ality. As a result, before you code a custom filter to handle a complex task such
       as compressing responses, you should check the documentation for your servlet
       container to see if it already provides this type of functionality. Often, it’s just
       a matter of configuring your servlet container. In chapter 18, for example, you
       learned how to use Tomcat to automatically compress responses.

    How to add a filter

        Adding a filter to an application works similarly to adding a servlet to an
        application. To start, you must code a class for the filter. Then, you add some
        code to the web.xml file to map the filter to one or more URL patterns.

!!!!!   Filters are executed in the order in which they are specified in web.xml, when the
        request is made..then the servlet/jsp code is executed, then the filters are executed
        again in the reverse order (see my code example with TestFilter1)

    Two filter classes

!!!!    Now that you’ve learned how to code and configure a simple filter, you’re
        ready to learn how to code filters that do processing on only one side of the
        request. With request-side processing, the processing is done before the request
        reaches the target servlet. With response-side processing, the processing is done
        after the requested servlet has been executed but before the response is returned
        to the client.

        When you code filters that only perform processing on one side of the
        request, the resulting code can be more modular and give you more flexibility
        when you configure the filter. However, as you'll see later in this chapter,
        there are times when a filter must perform both request-side and response-side
        processing.

!!! How to code a filter that performs request-side processing

        Figure 20-4 shows how to code a filter named LogRequestFilter that
        executes code before the requested servlet is executed. If you study the code for
        this filter, you'll see that it works similarly to the TestFilter1 presented in figure
        20-2. However, there are a few differences.

        First, the LogRequestFilter class includes the value of a cookie in the data
        that it writes to the log file. To do that, this code calls the getCookies method of
        the HttpServletRequest object to get an array of Cookie objects. Then, it uses the
        getCookie Value method of the custom CookieUtil class to get the value of the
        cookie named emailCookie.

!!!!!   Second, this class doesn’t do any processing after the requested servlet is
        executed. In other words, this servlet doesn’t do any response-side processing.
        To do that, all of the code for the doFilter method is coded before the statement
        that calls the doFilter method of the FilterChain object.

        Third, since this class doesn’t call any methods from the request object, it
        doesn’t bother to cast the ServletResponse object that it receives as a parameter
        to the HttpServletResponse object. Instead, it passes the ServletResponse object
        to the doFilter method of the FilterChain object.

!!!!!!   (obviously if you want to do response side processing you do the opposite.)

    How to wrap a request or response object
        (they use the decorator/wrapper pattern to wrap these 2 objects inside a filter into new objects
        that have additional functionality)

    How to restrict access by IP address
        (THE functionality is intended to restrict access by some configurable values, the ip, WHICH are taken
        from web.xml. The filter obtains the ip address from the request and returns 404 and logs a message if the
        ip is not in the configured list..)




Video tutorial links

https://www.youtube.com/watch?v=7AIjcZMo-V4
https://www.youtube.com/watch?v=7TOmdDJc14s&list=PLsyeobzWxl7pUPF2xjjJiG4BKC9x_GY46
https://www.youtube.com/watch?v=b42CJ0r-1to&list=PLE0F6C1917A427E96
https://www.youtube.com/watch?v=GbvuAIhLUZU&list=PLE0F6C1917A427E96&index=9
(diagrama faina legata de request/response objects si un web server..)
https://www.youtube.com/watch?v=sHpUrCJmCWs&list=PLE0F6C1917A427E96&index=10
https://www.youtube.com/watch?v=ji_N8pspwn0&list=PLE0F6C1917A427E96&index=11
(explica cum obiectele Servlet sunt instantiate de server,si apoi fiecare request e procesat intr-un alt thread…se
poate vedea simplu printand id-ul threadului curent intr-un servlet..)
https://www.youtube.com/watch?v=zk_zEp-mtvQ&list=PLE0F6C1917A427E96&index=19
(MVC nice example presentation)

Other relevant articles

https://www.javatpoint.com/model-1-and-model-2-mvc-architecture